parser = parser {
     end: !_
      sp: " " | "\t"
      nl: "\r\n" | "\n\r" | "\n" | "\r"

slcomment*: ("#"|"//") (!nl _)* (nl|end)
  comment*: "(#" (!"#)" (comment|_))* ("#)"|end)
          | "/*" (!"*/" (comment|_))* ("*/"|end)

      ws: (sp | comment)*
    wsnl: (sp | nl | comment | slcomment)*

     eov: . ("," | nl ..","? | slcomment ..","?)
  eoexpr: . ("," | ";" | ":" | nl | end | ")" | "}" | "]" | slcomment)
   eostm: . (";" | nl | end | ")" | "}" | "]" | slcomment)
  eostmb: . (":" | ";" | nl | end | ")" | "}" | "]" | slcomment)
 endexpr: @"end of expression" . ("," | ";" | ":" | nl | end | ")" | "}" | "]" | slcomment)
  endstm: @"end of expression" . (";" | nl | end | ")" | "}" | "]" | slcomment)

  letter: [@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789]
   first: [@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]
    name: f=first fs=letter* -> String(prepend(fs,f))

// ---- TEXT ----

  escape: "\\\""      -> tlINT('"')
        | "\\n"       -> tlINT('\n')
        | "\\r"       -> tlINT('\r')
        | "\\t"       -> tlINT('\t')
        | "\\\\"      -> tlINT('\\')
        | !"\"" _
   stext: ts=(!"$" escape)+                      -> String(ts)
   embed: "$$"
        | "$(".. body=body ..")" type=<scope>
        | "$" e=ref                              -> e
   text2: "\"\""                                 -> tlStringEmpty()
        | "\"" t=stext "\""                      -> t
   text*: data=text2 type=<string>
        | "\"" @"a closing '\"'" data=(embed|stext)* "\"" type=<stringlist>

    chr*: "'\\r'"       -> tlCHAR('\r')
        | "'\\n'"       -> tlCHAR('\n')
        | "'\\t'"       -> tlCHAR('\t')
        | "'\\\\'"      -> tlCHAR('\\')
        | "'\\''"       -> tlCHAR('\'')
        | "'" l=_ "'"   -> tlCHAR(tl_int(l))

// ---- NUMBERS ----

    sign: "-"                      -> tlINT(-1)
        | "+"                      -> tlINT(1)
        | ""                       -> tlINT(1)
    binn: n=([01]+)+("_"+) !"_" -> flatten(n)
    hexn: n=([0123456789ABCDEFGabcdefg]+)+("_"+) !"_" -> flatten(n)
    decn: n=([0123456789]+)+("_"+) !"_" -> flatten(n)
    num*: "0x" w=hexn              -> Number(null, w, 16)
        | "0b" w=binn              -> Number(null, w, 2)
        | s=sign w=decn "." f=decn -> Float(s, w, f, 10)
        | s=sign        "." f=decn -> Float(s, null, f, 10)
        | s=sign w=decn            -> Number(s, w, 10)

// ---- OBJECT, MAP AND LIST ----

  object: "{".. CI data=items @"a closing '}'" .."}"    type=<object>
        | "{"..@"a closing '}'" "}"                     type=<object>
     map: "[".. CI data=mapitems @"a closing ']'" .."]" type=<map>
        | "[".."=" @"a closing ']'" .."]"               type=<map>
   items: i=item is=(eov.. item)*                             -> prepend(is, i)
mapitems: i=(n=key ."="..@"a value" v=mexpr) is=(eov.. item)* -> prepend(is, i)
    key*: name
    dkey: pos=pos name=name type=<ref>
    item: "{"..@"a closing '}'" names=dkey+(eov ..) .."}"
        | n=key .@"a '='" "="..@"a value" v=mexpr

    list: "[".. CI data=litems @"a closing ']'" .."]" type=<list>
        | "["..@"a closing ']'" "]"                   type=<list>
  litems: i=mexpr !"=" is=(eov.. mexpr)*          -> prepend(is, i)

// ---- FUNCTION DEFINITION ----

    arrow: "->" | "=>"
    class: pos=pos "{".. as=fargs .."->"..@"a closing '}'" body=body .."}" type=<class>
 function: pos=pos "(".. as=fargs .."->"..@"a closing ')'" body=body ..")" type=<function>
         | pos=pos as=fargs ."->".. body=bodynl                            type=<function>
         | pos=pos "->".. body=bodynl                                      type=<function>
//         | block
mfunction: pos=pos as=fargs .arrow.. body=bodynl                                type=<function>
    block: pos=pos ":".. as=fargs ..arrow.. body=bodynl                         type=<block>
         | pos=pos ":".."("..as=fargs ..arrow..@"a closing ')'" body=body ..")" type=<block>
         | pos=pos ":".. body=bodynl type=<block>

     type: "("."@". n=name ")" -> n
    deflt: "("."=". v=mexpr ")" -> v
    farg*: "&&" pos=pos name=intro type=<lazycollect>
         | "&" pos=pos name=intro t=type? d=deflt? type=<lazy>
         | "*" pos=pos name=intro type=<collect>
         |  pos=pos name=intro t=type? d=deflt? type=<eager>
    fargs: a=farg as=(..",".. farg)* -> prepend(as, a)
         | "" -> tlListEmpty()

// ---- EXPRESSIONS ----

literal*: "true" | "false" | "null" | "undefined"
  opname: ("not"|"and"|"or"|"xor") !letter
    ref*: pos=pos !opname name=name type=<ref>
 varref*: pos=pos "$" name=name type=<varref>
   value: function
        | class
        | object
        | map
        | list
        | "("..@"a closing ')'" body=body ..")" type=<scope>
        | num | chr | text
        | literal
        | varref
        | ref

   margs: e=arg es=(..","..@"a value" arg)* &eostmb                          -> prepend(es, e)
        | e=mcallarg &eostmb                                                 -> tlListFrom1(e)
    args: e=fnarg                                                            -> tlListFrom1(e)
        | e=arg es=(eov.. arg)*                                              -> prepend(es, e)
        | ""                                                                 -> tlListEmpty()
mcallarg: v=mcall
   fnarg: v=mfunction n=<block>
     arg: n=name ."="!"=".@"a value" v=mexpr
        | v=expr
  setarg: v=mexpr
    garg: v=expr
    sarg: v=expr?

     met: "."
        | "::"
        | m="?" &(.. first) -> m
        | m="!" &(.. first) -> m
 method*: name
    tail: pos=pos ."(".. @"a closing ')'" CI args=args ..")" t=tail                  -> process_call(args, t, pos)
        | pos=pos .o=met.. m=method ."("..@"a closing ')'" CI args=args ..")" t=tail -> process_method(o, m, args, t, pos)
        | pos=pos .".".. m=method ."="!"=".. @"a value" value=setarg               -> process_set_field(m, value, pos)
        | pos=pos .o=met..@"a method call" m=method t=tail                         -> process_method(o, m, tlListEmpty(), t, pos)
        | pos=pos "[".. key=garg .."]" ."="!"=".. @"a value" value=setarg          -> process_set(key, value, pos)
        | pos=pos "[".. key=garg .."]" t=tail                                      -> process_get(key, t, pos)
        | pos=pos "["..@"a closing ']'" from=sarg?..":"..to=sarg?.."]" t=tail      -> process_slice(from, to, t, pos)
        | ""                                                                       -> tlNull
   mtail: pos=pos ."("..@"a closing ')'" CI args=args ..")" t=mtail                   -> process_call(args, t, pos)
        | pos=pos .o=met.. m=method ."("..@"a closing ')'" CI args=args ..")" t=mtail -> process_method(o, m, args, t, pos)
        | pos=pos .o=met.. m=method " ". !met !"[" !"(" !":" args=margs &eostmb    -> process_method(o, m, args, tlNull, pos)
        | pos=pos .o=met.. m=method t=mtail                                        -> process_method(o, m, tlListEmpty(), t, pos)
        | pos=pos "[".. key=garg .."]" t=mtail                                     -> process_get(key, t, pos)
        | pos=pos "["..@"a closing ']'" from=sarg?..":"..to=sarg?.."]" t=mtail     -> process_slice(from, to, t, pos)
        | pos=pos " ". !met !"(" !":" args=margs &eostmb                           -> process_call(args, tlNull, pos)
        | tail
    call: value=value t=tail                                                       -> process_tail(value, t)
   mcall: pos=pos value=value t=mtail                                              -> process_add_block(process_tail(value, t), tlNull, pos)
  mbcall: pos=pos value=value t=mtail block=block?                                 -> process_add_block(process_tail(value, t), block, pos)

      op: "+" | "-" | "*" | "/." | "/" | "%" | "^" | "|" | "&"
    expr: "!". rhs=logical &eoexpr type=<async>
        | e=logical &eoexpr                                                      -> e

 logical: l=not rs=(..pos=pos op=("or"|"and"|"xor").. r=logical)?                -> process_expr(l, rs)
     not: pos=pos type="not".. rhs=not | compare
 compare: l=bitwise rs=(..pos=pos op=("<="|"<"|">="|">"|"=="|"!=").. r=compare)? -> process_expr(l, rs)
 bitwise: l=shift rs=(..pos=pos op=("&"|"|").. r=bitwise)?                       -> process_expr(l, rs)
   shift: l=add rs=(..pos=pos op=("<<"|">>").. r=shift)?                         -> process_expr(l, rs)
     add: l=mul rs=(..pos=pos op=("+"|"-").. r=add)?                             -> process_expr(l, rs)
     mul: l=pow rs=(..pos=pos op=("*"|"/."|"/"|"%").. r=mul)?                    -> process_expr(l, rs)
     pow: l=paren rs=(..pos=pos op=("^").. r=pow)?                               -> process_expr(l, rs)
   paren: &"(" function
        //| "("..@"a closing ')'" body=body ..")" type=<scope>
        | p=pos "assert"."("..@"a closing ')'" b=pos CI args=args e=pos ..")" t=tail  -> process_assert(args, t, p, b, e, _p)
        | call

// ---- STATEMENTS ----

// we do not allow { object }: because {{ key }} -> { key=key }
   guard: "{".. !"{" cond=expr .."}".":".. body=bodynl
        | "{"..                  "}".":".. body=bodynl
   glist: setindent g=guard gs=(.. indent guard)*           -> prepend(gs, g)
  guards: guards=glist type=<guards>

  intro*: name
 newvar*: "var" sp."$" name
  tovar*: "$" name

selfref*: pos=pos !opname name=("return"|"goto"|"break"|"continue") type=<ref>
  assign: pos=pos name=newvar type=<newvar>
        | pos=pos name=tovar type=<var>
        | pos=pos name=intro type=<local>
   mexpr: guards
        | e=mfunction &eoexpr                                                -> e
        | pos=pos value=selfref &eostm                                       -> process_tail(value, process_call(tlListEmpty(), tlNull, pos))
        | "!". body=stms &eostm type=<async>
        | p=pos "assert" " ". !met !"(" !":" b=pos args=margs e=pos &eostm           -> process_assert(args, tlNull, p, b, e, _p)
        | p=pos "assert"."("..@"a closing ')'" b=pos CI args=args e=pos ..")" t=tail -> process_assert(args, t, p, b, e, _p)
        | e=mbcall &eostm                                                            -> e
        | expr
     stm: pos=pos to=tovar .op=op "="!"=".. @"a value" value=mexpr &endstm type=<assignop>
        | to=assign ."="!"=".. @"a value" value=mexpr &endstm type=<assign>
        | multi=(assign)+(.","..) .."="!"=".. @"a value" value=mexpr &endstm type=<multiassign>
        | e=mexpr &endstm                                                    -> e

   stms*: t=stm ts=(.";".@"a statement after ';'" stm)* -> prepend(ts, t)
   mstms: @"a statement" stms

// ---- BLOCKS ----

   body*: CI ts=stms tss=(.. stms)*            -> flatten(prepend(tss, ts))
        | ""                                   -> tlListEmpty()

 bodynl*: addindent ts=stms tss=(.. indent !end mstms)* -> flatten(prepend(tss, ts))
        | ""                                            -> tlListEmpty()

hashbang: "#!" (!nl _)*
 mustend: @"indent error" .. end
   start: .. hashbang? .. pos=pos body=bodynl mustend type=<function>
}

#ifndef NO_VALUE
static tlHandle _parser_parse(tlArgs* args) {
    tlString* code = tlStringCast(tlArgsGet(args, 0));
    if (!code) TL_THROW("expected a String");
    Parser* p = parser_new(tlStringData(code), tlStringSize(code));
    bool r = parser_parse(p, r_start);
    if (!r) {
        TL_THROW("parse error: %s at: %d:%d", p->error_msg, p->error_line, p->error_char);
    }
    return p->value;
}

void hotelparser_init() {
    tl_register_global("parse", tlNATIVE(_parser_parse, "parse"));
}
#endif

