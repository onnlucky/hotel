#!/usr/bin/env tl

/*
  TODO
add parser known "braces" open/close to expect the matching brace
process rules for shared prefix, and rewrite rules to branch from there
process rules until cycle without progress is found, cut and grow recursion from there
allow backtracking and process alternatives, until no parse is found, then report all disallowed backtracks
*/

no_value = false

parserParser = parser {

       sp: " " | "\t"
       nl: "\r\n" | "\n\r" | "\n" | "\r"
slcomment: "//" (!nl _)*
 icomment: "/*" (!"*/" _)* ("*/"|end)
  comment: (slcomment (nl|end) | icomment)
       ws: (sp | nl | comment)*

    name: ls=(alpha|numeric|[_])+   -> ls.toChar

  escape: "\\\""      -> "\""
        | "\\n"       -> "\n"
        | "\\r"       -> "\r"
        | "\\t"       -> "\t"
        | "\\$"       -> "\$"
        | "\\\\"      -> "\\"
        | !"\"" l=_   -> l.toChar
    text: "\"" ts=escape* @"a closing '\"'" "\"" -> ts.join

  cscape: "\\]"       -> "]"
        | "\\n"       -> "\n"
        | "\\r"       -> "\r"
        | "\\t"       -> "\t"
        | "\\$"       -> "\$"
        | "\\\\"      -> "\\"
        | !"]" l=_    -> l.toChar
    char: "[" ts=cscape* @"closing ']'" "]" -> ts.join

     act: "->". ts=(!"\n" _)*             -> ts.toChar

    term: "(". t=or @"a closing ')'" .")" -> { type="sub", term=t }
        | ".."                            -> { type="call", target="wsnl" }
        | "."                             -> { type="call", target="ws" }
        | "_"                             -> { type="prim", target="any" }
        | "<" t=name ">"                  -> { type="token", token=t }
        | "<>"                            -> { type="token", token="" }
        | t=text                          -> { type="prim", target="text", text=t }
        | t=char                          -> { type="prim", target="char", text=t }
        | "pos" !alpha !"_" !":" !"*:"    -> { type="prim", target="pos" }
        | "setindent" !alpha !"_" !":" !"*:" -> { type="setindent" }
        | "addindent" !alpha !"_" !":" !"*:" -> { type="addindent" }
        | "CI" !alpha !"_" !":" !"*:"        -> { type="resetindent" }
        | "indent" !alpha !"_" !":" !"*:"    -> { type="indent" }
        | n=name !"_" !":" !"*:"          -> { type="call", target=n }
    post: "!" @"a term" t=term            -> { type="not", term=t }
        | "&" @"a term" t=term            -> { type="ahead", term=t }
        | t=term "*(". @"a closing ')'" s=or .")" -> { type="starsep", term=t, sep=s }
        | t=term "+(". @"a closing ')'" s=or .")" -> { type="plussep", term=t, sep=s }
        | t=term "*"                      -> { type="star", term=t, sep=null }
        | t=term "+"                      -> { type="plus", term=t, sep=null }
        | t=term "?"                      -> { type="opt", term=t }
        | term
   named: n=name "=" @"a term"  t=post    -> { type="name", value=n, term=t }
        | "@" t=text                      -> { type="anchor", msg=t }
        | "@"                             -> { type="anchor", msg="" }
        | post

     and: h=named rs=(.named)* .a=act?    -> { type="and", terms=[h].cat(rs), act=a }
      or: @"some terms"
          h=and rs=(."|". and)*           -> { type="or", terms=[h].cat(rs) }

    spec: "*"                             -> "color"
        | ""

    rule: .n=name s=spec @":" ":". t=or   -> { type="rule", name=n, term=t, spec=s }
  parser: n=name ."="."parser"."{"
          rs=rule*
          @"a closing '}'" ."}"           -> { n=n, rs=rs }
   start: b=(!(name ."="."parser"."{") _)*
          p=parser
          a=_*                            -> { before=b.toChar, after=a.toChar, rules=p.rs, name=p.n }
}

forbidden = [pos=true,setindent=true,addindent=true,CI=true,indent=true]
rules = HashMap.new
rulesub = HashMap.new
subs = Array.new
colors = Array.new

to_arg = t, name ->
    { t.type == "and"  }: to_sub(t, name)
    { t.type == "or"   }: to_sub(t, name)
    { t.type == "sub"  }: to_sub(t.term, name)
    { t.type == "prim" }: t
    { t.type == "call" }: t
    { }: throw "ERROR to arg:"+ repr(t)

can_optimize_and = t ->
    if not no_value and try(t.act): return false
    if t.terms.size != 1: return false
    if t.terms[1].type == "name": return false
    true

to_call = t, name ->
    { t.type == "and" }:
        if can_optimize_and(t): return to_call(t.terms[1], name)
        {type= "call", target=to_sub(t, name)}
    { t.type == "or" }:
        {type= "call", target=to_sub(t, name)}
    { t.type == "sub"     }:
        if t.term.terms.size == 1:
            return to_call(t.term.terms[1], name)
        {type="call", target=to_sub(t.term, name)}
    { t.type == "name"    }: {type="name", value=t.value, term=to_call(t.term, name)}
    { t.type == "call"    }:
        if not rules[t.target]: throw "rule without a definition: '$(t.target)'"
        {type="call", target="$(t.target)"}
    { t.type == "starsep" }: {type="call", target=to_sub(t, name)}
    { t.type == "plussep" }: {type="call", target=to_sub(t, name)}
    { t.type == "star"    }: {type="call", target=to_sub(t, name)}
    { t.type == "plus"    }: {type="call", target=to_sub(t, name)}
    { t.type == "opt"     }: {type="call", target=to_sub(t, name)}
    { t.type == "not"     }: {type="call", target=to_sub(t, name)}
    { t.type == "ahead"   }: {type="call", target=to_sub(t, name)}

    { t.type == "token"   }: t
    { t.type == "prim"    }: t
    { t.type == "anchor"  }: t
    { t.type == "indent"  }: t
    { t.type == "addindent" }: t
    { t.type == "setindent" }: t
    { t.type == "resetindent" }: t
    { }: throw "ERROR to call:"+ repr(t)

to_sub = t, name, rule ->
    s = rulesub[name] = (rulesub[name] or 0) + 1
    name = { rule }: "$(rule)"
           {      }: "$(name)_$(s)"
    { t.type == "and" }:
        terms = t.terms.map(t -> to_call(t, name))
        subs.add { type="and", act=try(t.act), {name, terms}}
        return name
    { t.type == "or" }:
        if t.terms.size == 1: return to_sub(t.terms[1], name, rule)
        terms = t.terms.map(t -> to_call(t, name))
        subs.add { type="or", {name, terms}}
        return name
    { t.type == "starsep" }: subs.add { type="starsep", term=to_call(t.term, name), sep=to_call(t.sep, name), {name}}; return name
    { t.type == "plussep" }: subs.add { type="plussep", term=to_call(t.term, name), sep=to_call(t.sep, name), {name}}; return name
    { t.type == "star"    }: subs.add { type="star", term=to_call(t.term, name), {name}}; return name
    { t.type == "plus"    }: subs.add { type="plus", term=to_call(t.term, name), {name}}; return name
    { t.type == "opt"     }: subs.add { type="opt", term=to_call(t.term, name), {name}}; return name
    { t.type == "not"     }: subs.add { type="not", term=to_call(t.term, name), {name}}; return name
    { t.type == "ahead"   }: subs.add { type="ahead", term=to_call(t.term, name), {name}}; return name
    { }: throw "ERROR to sub:"+ repr(t)

ast = parserParser(io.File(args[1]).readString)
ast.rules.each: rule ->
    if forbidden[rule.name]: throw "rule cannot be named '$(rule.name)'"
    if rules[rule.name]: throw "rule already defined '$(rule.name)'"
    rules[rule.name] = rule

// add some default rules if they don't exist
if not rules["ws"]:
    rules["ws"] = { name="ws", term={ type="and", terms=[{ type="prim", target="ws" }]}, spec=null}
if not rules["wsnl"]:
    rules["wsnl"] = { name="wsnl", term={ type="and", terms=[{ type="prim", target="wsnl" }]}, spec=null}
if not rules["start"] and ast.rules.size > 0:
    rules["start"] = { name="start", term={ type="and", terms=[{ type="call", target=ast.rules.first.name }]}, spec=null}

rules.each: name, rule ->
    to_sub(rule.term, null, name)

lines = abstract(subs)
io.File(args[2]).write(ast.before + lines + ast.after)

