parser = parser {
     end: !_
      sp: " " | "\t"
      nl: "\r\n" | "\n\r" | "\n" | "\r"

slcomment*: "#" (!nl _)* (nl|end)
  comment*: "(#" (!"#)" (comment|_))* ("#)"|end)

      ws: (sp | comment)*
    wsnl: (sp | nl | comment | slcomment)*

     eos: . (";" | nl | slcomment)
     eov: . ("," | nl | slcomment)
   eostm: . (";" | nl | end | ")" | "}" | "]" | slcomment)
  eoexpr: . ("," | ";" | nl | end | ")" | "}" | "]" | slcomment)

  letter: [@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789]
   first: [@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]
    name: f=first fs=letter* -> String(f,fs)

// ---- TEXT ----

  escape: "\\\""      -> '"'
        | "\\n"       -> '\n'
        | "\\r"       -> '\r'
        | "\\t"       -> '\t'
        | "\\\\"      -> '\\'
        | !"\"" _
   stext: "\"" ts=escape* @"a closing '\"'" "\"" -> ts.join
   text*: stext

// ---- NUMBERS ----

 numeric: [0123456789]
    sign: "-"  -> -1
        | "+"  -> 1
        | ""   -> 1
    numr: n=numeric "_" b=numr  -> b.prepend(n - 48)
        | n=numeric b=numr      -> b.prepend(n - 48)
        | n=numeric             -> [n - 48]
    num*: s=sign n=numr         -> s * n.reduce(l, r -> l * 10 + r)

// ---- OBJECT, MAP AND LIST ----

  object: "{".. is=items @"a closing '}'" .."}"   -> {type:"object",data:is}
        | "{"..@"a closing '}'" "}"
     map: "[".. is=items @"a closing ']'" .."]"   -> {type:"map",data:is}
        | "["..":" @"a closing ']'" .."]"
   items: i=item is=(eov.. items)*                -> is.prepend(i)
    key*: name
    item: n=key .@"a ':'" ":"..@"a value" v=mexpr -> {{n, v}}

    list: "[".. is=litems @"a closing ']'" .."]"  -> {type:"list",data:is}
        | "[".."]"
  litems: i=mexpr !":" is=(eov.. litems)*         -> is.prepend(i)

// ---- FUNCTION DEFINITION ----

    class: "{".. as=fargs .."->"..@"a closing '}'" b=body .."}" -> {{as, b}, type:"class"}
 function: "(".. as=fargs .."->"..@"a closing ')'" b=body ..")" -> {{as, b}, type:"function"}
         | a=farg .."->".. b=bodynl                             -> {{b}, as:[a], type:"function"}
         | "->".. b=bodynl                                      -> {{b}, as:[], type:"function"}
mfunction: as=fargs .."->".. b=bodynl                           -> {{as, b}, type:"function"}
         | function

    farg*: name
    fargs: a=farg as=(..",".. farg)* -> as.prepend(a)
         | ""

// ---- EXPRESSIONS ----

literal*: "true" | "false" | "null" | "undefined"
    ref*: name
   value: function
        | class
        | object
        | list
        | map
        | num | text
        | literal
        | ref

    args: e=expr es=(..","..@"a value after ','" expr)* -> es.prepend(e)
        | ""

     met: "." | "::" | "?" | "!"
 method*: name
    tail: ."("..@"a closing ')'" as=args ..")" t=tail                  -> {{as}, tail:t, type:"call"}
        | .m=met.. n=method "("..@"a closing ')'" as=args ..")" t=tail -> {{m,n,as}, tail:t, type:"method"}
        | .m=met..@"a method call" n=method t=tail                     -> {{m,n}, tail:t, type:"method"}
        | ""                                                           -> {type:"end"}
    call: v=value t=tail

      op: "+" | "-" | "*" | "/" | "%" | "^"
    expr: l=call (..op=op.. r=expr)*

// ---- STATEMENTS ----

  intro*: name
   mexpr: mfunction | expr
     stm: n=intro .":"!":".. @"a value" e=mexpr -> { type:"assign", n: n, e: e }
        | mexpr

    stms: t=stm ts=(.";".@"statement after ';'" stm)* -> ts.prepend(t)
    // stms: stm+(.";".@"statement after ';'")

// ---- BLOCKS ----

    body: ts=stms tss=(eos.. stms)* -> tss.prepend(ts).flatten
        | ""

  bodynl: ts=stm

hashbang: "#!" (!nl _)*
   start: .. hashbang? .. b=body .. end -> b
}

