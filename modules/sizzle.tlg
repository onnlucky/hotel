parseSel = parser {
    name: ts=(!" " !"#" !"." !"[" !"]" !"=" _)+ -> ts.toChar

     any: "*"                       -> { match= "any" }
    attr: "[".n=name."]"            -> { match= "hasattr", name= n }
        | "[".n=name."=".v=name."]" -> { match= "attr", name= n, val= v }
      id: "#" n=name                -> { match= "id", name= n }
   class: "." n=name                -> { match= "class", name= n }
    node: n=name                    -> { match= "node", name= n }

    match: any | attr | id | class | node
    start: rs=(. match+)* . !_      -> rs
}

walk = node, match, result ->
    if not node: return
    if not node.attrs: return

    m = Var.new true
    match[1].each: s ->
        _match(s.match == "node" and s.name == node.name): 1
        _match(s.match == "class" and s.name == node.attrs["class"]): 1
        _match(s.match == "id" and s.name == node.attrs["id"]): 1
        _match(s.match == "hasattr" and node.attrs.has(s.name)): 1
        _match(s.match == "attr" and node.attrs[s.name] == s.val): 1
        _match(true): m.set false
    if m.get:
        if match.size == 1:
            if not result: return node
            result.add node
        if match.size > 1:
            node.each: n => r = walk(n, match[2:], result); if r: return r
    node.each: n => r = walk(n, match, result); if r: return r
    return

query = node, match ->
    ls = Array.new
    walk(node, match, ls)
    return ls

select = node, match ->
    return walk(node, match)

// TODO add a local cache for sel -> parseSel(sel) mappings
find = sel, node ->
    match = parseSel(sel)
    select(node, match)

findAll = sel, node ->
    match = parseSel(sel)
    query(node, match)

{{ find, findAll }}

