set_target = (call, fn ->
    if not call: return fn
    if not call.target: return _Map_set(call, #target, fn)
    _Map_set(call, #target, set_target(call.target, fn))
)
add_block = (call, block ->
    if not block: return call
    _Map_set(call, #block, block)
)

parse = parser {
      sp: " " | "\t"
      nl: "\r\n" | "\n\r" | "\n" | "\r"

slcomment: "//" (!nl _)*
 icomment: "/*" (!"*/" _)* ("*/"|end)
  comment: (slcomment (nl|end) | icomment)

      ws: (sp | icomment)*
    wsnl: (sp | nl | comment)*

   sepnl: . ("," | nl) wsnl
     eos: . ";" .
   eosnl: . (";" | nl) wsnl
   eostm: . (";" | nl | end | ")" | "}" | "]") wsnl

nonident: " " | "\n" | "\r" | "\t" | "." | "!" | ":" | ";" | "," | "(" | ")" | "{" | "}" | "[" | "]" | "/"
   ident: n=alpha rs=(!nonident _)* -> rs.prepend(n).toChar

    sign: "-" -> -1
        | "+" ->  1
        | .   ->  1
     num: s=sign n=numr        -> s * n.reduce((l, r -> l * 10 + r))
    numr: n=numeric "_" b=numr -> b.prepend(n - 48)
        | n=numeric b=numr     -> b.prepend(n - 48)
        | n=numeric            -> [n - 48]

   value: "(". c=stm .")"                          -> c
        | "(".@"closing ')'" wsnl ts=stms wsnl ")" -> ts
        | n=ident                                  -> { type: #ref, name: n }
        | num

    args: a=expr as=(sepnl expr)*             -> as.prepend(a)
        | .                                   -> []

    tail: "(". @"a closing ')'" as=args .")" t=tail               -> set_target(t, { type: #call, target: null, args: [as] })
        | "[". l=expr? .":". @"a closing ']'" r=expr? ."]" t=tail -> set_target(t, { type: #send, target: null, msg: #slice, args: [l, r] })
        | "[". @"a closing ']'" e=expr ."]" t=tail                -> set_target(t, { type: #send, target: null, msg: #get, args: [e] })
        | "." n=ident "(". @"a closing ')'" as=args .")" t=tail   -> set_target(t, { type: #send, target: null, msg: n, args: as })
        | "." @"a message" n=ident t=tail                         -> set_target(t, { type: #send, target: null, msg: n, args: [], topcall: true })
        | .                                                       -> null

    call: fn=value t=tail                                         -> set_target(t, fn)

 topargs: a=expr as=(.","@"arg" wsnl expr)* -> as.prepend(a)
 topcall: !"(" fn=ident sp. !"(" (
            a=topcall                       -> { type: #call, target: fn, args: [a] }
            | as=topargs                    -> { type: #call, target: fn, args: as  }
        )
        // certain calls can be used as topcall, e.g. print.call debug.inspect 42
        | !"(" fn=call ?(fn?topcall) sp. !"(" (
            a=topcall                       -> { type: #call, target: fn, args: [a] }
            | as=topargs                    -> { type: #call, target: fn, args: as  }
        )

   block: ":". body

selfcall: fn=ident                          -> { type: #call, target: fn, args: [] }
    expr: call
        | value
     stm: e=topcall .b=block?            &eostm -> add_block(e, b)
        | e=selfcall .b=block?           &eostm -> add_block(e, b)
        | e=call .b=block?               &eostm -> add_block(e, b)
        | e=expr     @"end of statement" &eostm -> e

    stms: t=stm ts=(.";". stm)*                -> ts.prepend(t)

    body: wsnl c=column ts=stms
          tss=(wsnl cc=column ?(cc >= c) stms)*   -> tss.prepend(ts)

   start: b=body wsnl end -> b
}

print inspect parse(io.File("test-input.tl").read)

