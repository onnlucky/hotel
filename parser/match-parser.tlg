set_target = { in, target ->
    if not in: return target
    if not in.target: return _Map_set(in, #target, target)
    return _Map_set(in, #target, set_target(in.target, target))
}

parse = parser {
    body: ."code".

    name: cs=(alpha)+                            -> cs.toChar
indexnum: cs=(numeric)+                          -> cs.toChar.eval
  number: cs=(numeric)+                          -> cs.toChar.eval
  string: "\"" cs=(!"\"" _)* "\""                -> cs.toChar

   value: number
        | string
        | "true"                                 -> true
        | "false"                                -> false
        | "null"                                 -> null
        | "undefined"                            -> undefined

 pattern: "["..@"closing ']'" es=plist .."]"     -> { type: #list, elements: es }
        | "{"..@"closing" es=pmap..r=prest.."}"  -> { type: #map, elements: es, rest: r }
        | value

   pbind: "@" name
   ptype: "<".. n=name ..">"                     -> n
  pvalue: pattern

   plist: f=ple rs=(..",".. ple)* ..","..r=prest -> [f].cat(rs).add(r)
        | f=ple rs=(..",".. ple)*                -> [f].cat(rs)
        | .                                      -> []
     ple: v=pvalue. n=pbind                      -> { value: v, type: null, name: n }
        | v=pvalue                               -> { value: v, type: null, name: null }
        | t=ptype. n=pbind                       -> { value: null, type: t, name: n }
        | t=ptype                                -> { value: null, type: t, name: null }
        | n=pbind                                -> { value: null, type: null, name: n }
        | "*" !"*"                               -> { value: null, type: null, name: null }
   prest: "**".n=pbind                           -> { type: #rest, name: n }
        | "**"                                   -> { type: #rest, name: null }

   case: "||".. p=pattern @"->" .."->".. b=body  -> { type: #case, pattern: p, body: b }
       | "||".. @"->" "->".. b=body              -> { type: #case, pattern: true, body: b }

    top: case
       | set
       | topexpr
       | name

    set: f=sett rs=(.",".. sett)* ."=".. e=top -> { type: #set, at: rs.prepend(f), value: e }
   sett: c=topcall ?(c?top) -> c

topexpr: c=topcall ?(c?top) .as=topargs -> _Map_set(c, #args, as)
       | c=topcall ?(c?top)  .a=topexpr -> _Map_set(c, #args, [a])
       | expr
topargs: f=expr rs=(.",". expr)*     -> rs.prepend(f)
 topend: " " !(."(") !(..".")

topcall: n=name topend               -> { type: #call, target: n, args: [], top: true }
       | call
   call: n=name t=tail               -> set_target(t, n)
       | v=value t=tail              -> set_target(t, v)

   tail: .."."..n=name.as=argsb t=tail -> set_target(t, { type: #send, target: null, msg: n, args: as, top: false })
       | .."."..@"a msg" n=name t=tail -> set_target(t, { type: #send, target: null, msg: n, args: [], top: true })
       | ."/".. n=indexnum t=tail      -> set_target(t, { type: #index, target: null, args: [n], top: true })
       | ."/"..@"a name" n=name t=tail -> set_target(t, { type: #index, target: null, args: [n], top: true })
       | .as=slice t=tail              -> set_target(t, { type: #slice, target: null, args: as, top: false })
       | .as=index t=tail              -> set_target(t, { type: #index, target: null, args: as, top: true })
       | .as=argsb t=tail              -> set_target(t, { type: #call, target: null, args: as, top: false })
       | .                             -> null

  slice: "[".. l=expr? ..":"..@"closing ']'" r=expr? .."]" -> [l, r]
  index: "[".. @"an index" e=expr @"closing ']'" .."]"        -> [e]

  argsb: "("..@"closing ')'" as=args ..")" -> as
   args: f=expr rs=(..",".. expr)*         -> rs.prepend(f)
       | .                                 -> []

   expr: "("..@"closing ')'" e=topexpr ..")" -> e
       | call
       | value

   start: .top
}

print "test 0 1"
print inspect parse "print.foo"
print "test 0 2"
print inspect parse "print.foo, x = 10"

/*
print "test 1"
print inspect parse "|| -> code"
print "test 2"
print inspect parse "|| [@foo, <String>@bar] -> code"


