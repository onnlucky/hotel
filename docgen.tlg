objects = HashMap.new

var $package = null
var $object = null

makeName = { ns ->
    if ns.size == 0: {
        if not $object: return ""
        if not $package: return $object
        return "$($package).$($object)"
    }
    if ns.size == 1: {
        if not $package: return ns[0]
        return "$($package).$(ns[0])"
    }
    return ns.join(".")
}

docPackage = { path, doc ->
    $package = null
    $object = null
    if path and path != "global": $package = path
    // TODO doc
}
docObject = { path, doc ->
    names = path.split(".")
    if names.size == 1: $object = names[0]
    if names.size > 1: {
        $package = names[:-1].join(".")
        $object = names[names.size - 1]
    }
    // TODO doc
}
docMethod = { path, doc ->
    names = path.split(".")
    name = makeName(names[:-1])
    method = names[names.size - 1]
    object = objects[name] or (objects[name] = Array.new)
    object.add({ name: method, doc: doc })
    print "found:", name, method
}

parseDocs = parser {
       nl: "\n"
     text: ts=(!"\n" _)*             -> ts.toChar.strip
   textnl: t=text nl                 -> t
     name: ts=(![: \t\n\r] _)+       -> ts.toChar

   bodynl: ."///". textnl
     body: ":" f=textnl bs=bodynl*   -> bs.prepend(f).join("\n")
         | bs=bodynl*                -> bs.join("\n")
      cmd: "package" .n=name .b=body -> docPackage(n, b)
         | "object" .n=name .b=body  -> docObject(n, b)
         | n=name b=body             -> docMethod(n, b)
         | t=textnl                  -> print "WARNING:", t
      doc: ."///". cmd

     line: doc | (!"\n" _)* nl
    start: line* (!"\n" _)* end
}

args.slice.each: { a ->
    print "processing:", a
    docPackage()
    parseDocs io.File(a).read
}

f = io.File("doc.html").open(create=true,truncate=true)
objects.keys.each: { k ->
    f.write "<h2>$k</h2>\n"
    objects[k].each: { m ->
        f.write "<h4>$(m.name)</h4>\n<p>\n$(m.doc)\n</p>\n"
    }
}
print "open doc.html"

