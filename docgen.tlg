Object = { name ->
    print "Object:", name
    name = name
    var doc = ""

    methods = HashMap.new
    objects = HashMap.new

    add = name, args, doc ->
        print "Object:", this.name, "method:", name, args
        this.methods[name] = {{ args, doc }}
}

root = Object("")

var currentmodule
var currentobject

objectFor = path ->
    var o = root
    path.each: s ->
        old = o
        o = root.objects[s]
        if not o:
            o = old.objects[s] = Object(s)
    return o

isValidModule = n ->
    isString(n) and n.size > 1

docModule = path, doc ->
    p = { path }: currentmodule + path.split(".")
        {      }: currentmodule
    p.each(n -> if not isValidModule(n): Error("invalid module '$n' in '$path'").throw)
    module = objectFor(p)
    if doc: module.doc += doc
    currentmodule = module
    currentobject = module

docObject = path, doc ->
    p = currentmodule + path.split(".")
    p.each(n -> if not isValidModule(n): Error("invalid object '$n' in '$path'").throw)
    object = objectFor(p)
    if doc: object.doc += doc
    currentobject = object

docMethod = path, doc ->
    pa = path.split("(", limit=1)
    args = { pa[2] }: "(" + pa[2]
           {       }: null
    p = pa[1].split(".")
    p.each(n -> if not isValidModule(n): Error("invalid method '$n' in '$path'").throw)

    if p.size > 1: currentobject = objectFor(p[:-2])
    currentobject.add(p.last, args, doc)

addDoc = doc ->
    currentobject.doc += doc

parseDocs = parser {
       ws: [ \t]*
       nl: "\n" | "\r\n" | "\r"
     text: ts=(!"\n" _)*             -> ts.toChar.trim
   textnl: t=text nl                 -> t
     name: ts=(![:\r\n] _)+ ":"      -> ts.toChar

   bodynl: .("//."|"#."). textnl
     body: f=textnl bs=bodynl*       -> bs.prepend(f).join("\n")
         | bs=bodynl*                -> bs.join("\n")
      cmd: "module" .n=name .b=body  -> docModule(n, b)
         | "module" .nl              -> docModule()
         | "object" .n=name .b=body  -> docObject(n, b)
         | n=name .b=body            -> docMethod(n, b)
      doc: .("//."|"#."). cmd
         | b=bodynl                  -> addDoc(b)

     line: doc | (!"\n" _)* nl
    start: line* . end
}

args.slice.each: a ->
    print "processing:", a
    currentmodule = []
    if a.endsWith(".tl"):
        currentmodule = [a[:-4].split("/").last]
    currentobject = objectFor(currentmodule)
    parseDocs(io.File(a).readString)

f = io.File("doc.html").open(create=true,truncate=true)

f.write("<style>h4{margin-bottom:0;} pre{margin-top:0;}</style>\n")

abstractObject = object, path ->
    if object.methods.size == 0: return
    f.write "<b><a href=\"#", path, "\">", path, "</a></b>"
    object.methods.each: name, m ->
        f.write " <a href=\"#", path, ".", name, "\">", name, "</a>"
    f.write "<br>\n"

abstractModule = m, path ->
    abstractObject(m, path.join("."))
    m.objects.each(name, sub -> abstractModule(sub, path + [name]))

abstractModule(root, [])

writeObject = object, path ->
    if object.methods.size == 0: return
    f.write "<h2 id=\"", path, "\">", path, "</h2>\n"
    f.write "<pre>\n", html.escape(object.doc), "\n</pre>\n"
    object.methods.each: name, m ->
        f.write "<h4 id=\"", path, ".", name, "\">", name, m.args, "</h4>\n<pre>\n", m.doc, "\n</pre>\n"

writeModule = m, path ->
    writeObject(m, path.join("."))
    m.objects.each(name, sub -> writeModule(sub, path + [name]))

writeModule(root, [])

print "open doc.html"

